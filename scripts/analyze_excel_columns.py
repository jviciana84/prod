#!/usr/bin/env python3
"""
Script para analizar las columnas del Excel de BMW y crear la estructura de mapeo
"""

import csv
import sys
from pathlib import Path

def analyze_excel_columns(csv_file_path):
    """Analiza las columnas del archivo CSV de BMW"""
    
    try:
        with open(csv_file_path, 'r', encoding='utf-8') as file:
            # Leer la primera l√≠nea para obtener los headers
            reader = csv.reader(file, delimiter=';')
            headers = next(reader)
            
            print("üîç === AN√ÅLISIS DE COLUMNAS DEL EXCEL BMW ===\n")
            print(f"üìä Total de columnas encontradas: {len(headers)}\n")
            
            # Mostrar todas las columnas con su √≠ndice
            print("üìã COLUMNAS DISPONIBLES:")
            print("-" * 80)
            for i, header in enumerate(headers):
                print(f"{i:2d}. {header}")
            
            print("\n" + "=" * 80)
            
            # Categorizar columnas por tipo
            categorias = {
                "Identificaci√≥n": [],
                "Informaci√≥n del Veh√≠culo": [],
                "Precios": [],
                "Fechas": [],
                "Caracter√≠sticas T√©cnicas": [],
                "Ubicaci√≥n/Origen": [],
                "Estado/Disponibilidad": [],
                "Fotos/URLs": [],
                "Otros": []
            }
            
            for i, header in enumerate(headers):
                header_lower = header.lower()
                
                if any(keyword in header_lower for keyword in ['id', 'anuncio', 'matr√≠cula', 'chasis', 'referencia']):
                    categorias["Identificaci√≥n"].append((i, header))
                elif any(keyword in header_lower for keyword in ['modelo', 'marca', 'color', 'carrocer√≠a', 'combustible', 'motor', 'versi√≥n']):
                    categorias["Informaci√≥n del Veh√≠culo"].append((i, header))
                elif any(keyword in header_lower for keyword in ['precio', 'valor', 'cuota']):
                    categorias["Precios"].append((i, header))
                elif any(keyword in header_lower for keyword in ['fecha', 'd√≠as']):
                    categorias["Fechas"].append((i, header))
                elif any(keyword in header_lower for keyword in ['km', 'potencia', 'cilindrada', 'cambio', 'equipamiento']):
                    categorias["Caracter√≠sticas T√©cnicas"].append((i, header))
                elif any(keyword in header_lower for keyword in ['ubicaci√≥n', 'origen', 'concesionario', 'tienda', 'pa√≠s']):
                    categorias["Ubicaci√≥n/Origen"].append((i, header))
                elif any(keyword in header_lower for keyword in ['estado', 'disponibilidad', 'destino']):
                    categorias["Estado/Disponibilidad"].append((i, header))
                elif any(keyword in header_lower for keyword in ['url', 'foto', 'imagen']):
                    categorias["Fotos/URLs"].append((i, header))
                else:
                    categorias["Otros"].append((i, header))
            
            # Mostrar categor√≠as
            for categoria, columnas in categorias.items():
                if columnas:
                    print(f"\nüìÇ {categoria.upper()}:")
                    for idx, header in columnas:
                        print(f"   {idx:2d}. {header}")
            
            print("\n" + "=" * 80)
            
            # Generar sugerencias de mapeo para nuestra BD
            print("\nüéØ SUGERENCIAS DE MAPEO PARA NUESTRA BD:")
            print("-" * 80)
            
            mapeo_sugerido = {
                "license_plate": "Matr√≠cula",
                "model": "Modelo", 
                "brand": "Marca",
                "chassis": "Chasis",
                "color": "Color Carrocer√≠a",
                "fuel_type": "Combustible",
                "transmission": "Cambio",
                "body_type": "Carrocer√≠a",
                "engine_power": "Potencia Cv",
                "mileage": "KM",
                "purchase_price": "Precio compra",
                "sale_price": "Precio",
                "purchase_date": "Fecha compra DMS",
                "manufacturing_date": "Fecha fabricaci√≥n",
                "first_registration_date": "Fecha primera matriculaci√≥n",
                "origin_location": "Concesionario",
                "equipment": "Equipamiento de serie",
                "extras": "Extras",
                "state": "Estado",
                "availability": "Disponibilidad",
                "certificate": "Certificado",
                "warranty": "Garant√≠a",
                "accident_free": "Libre de siniestros",
                "currency": "Moneda",
                "internal_note": "Nota interna",
                "observations": "Observaciones",
                "origin": "Origen",
                "unified_origins": "Origenes unificados",
                "origin_country": "Pa√≠s origen",
                "supplier": "Proveedor",
                "internal_reference": "Referencia interna",
                "fiscal_regime": "Regimen fiscal",
                "store": "Tienda",
                "distribution_type": "Tipo de distribuci√≥n",
                "engine_type": "Tipo motor",
                "store_location": "Ubicaci√≥n tienda",
                "url": "URL",
                "photo_urls": ["URL foto 1", "URL foto 2", "URL foto 3", "URL foto 4", "URL foto 5"],
                "valid_for_certificate": "V√°lido para certificado",
                "existence_value": "Valor existencia",
                "imported_vehicle": "Veh√≠culo importado",
                "version": "Versi√≥n"
            }
            
            for campo_bd, columna_excel in mapeo_sugerido.items():
                if isinstance(columna_excel, list):
                    # Para campos m√∫ltiples como fotos
                    indices = []
                    for col in columna_excel:
                        try:
                            idx = headers.index(col)
                            indices.append(f"{idx}:{col}")
                        except ValueError:
                            pass
                    if indices:
                        print(f"   {campo_bd:25} ‚Üí {', '.join(indices)}")
                else:
                    try:
                        idx = headers.index(columna_excel)
                        print(f"   {campo_bd:25} ‚Üí {idx:2d}:{columna_excel}")
                    except ValueError:
                        print(f"   {campo_bd:25} ‚Üí ‚ùå No encontrada: {columna_excel}")
            
            return headers
            
    except FileNotFoundError:
        print(f"‚ùå Error: No se encontr√≥ el archivo {csv_file_path}")
        return None
    except Exception as e:
        print(f"‚ùå Error al analizar el archivo: {e}")
        return None

if __name__ == "__main__":
    # Buscar archivos CSV en la carpeta de descargas
    descargas_path = Path("scripts/descargas")
    csv_files = list(descargas_path.glob("*.csv"))
    
    if not csv_files:
        print("‚ùå No se encontraron archivos CSV en scripts/descargas/")
        sys.exit(1)
    
    # Usar el archivo m√°s reciente
    latest_file = max(csv_files, key=lambda x: x.stat().st_mtime)
    print(f"üìÅ Analizando archivo: {latest_file.name}")
    
    headers = analyze_excel_columns(latest_file)
    
    if headers:
        print(f"\n‚úÖ An√°lisis completado. Se encontraron {len(headers)} columnas.")
        print(f"üí° Usa esta informaci√≥n para crear la estructura de mapeo en la BD.") 
import { NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"

// Lista de palabras clave que indican preguntas sobre datos internos
const ALLOWED_KEYWORDS = [
  "ventas", "veh√≠culos", "coches", "entregas", "stock", "inventario",
  "colores", "marcas", "modelos", "precios", "estad√≠sticas", "datos",
  "reportes", "informes", "nuevas entradas", "validados", "extornos",
  "incidencias", "movimientos", "llaves", "fotos", "incentivos",
  "usuarios", "empleados", "concesionario", "dealer", "showroom",
  "facturado", "facturaci√≥n", "facturar", "serie", "gasolina", "diesel",
  "bmw", "audi", "mercedes", "volkswagen", "seat", "opel", "ford",
  "honda", "toyota", "nissan", "hyundai", "kia", "peugeot", "renault",
  "citroen", "fiat", "alfa", "volvo", "skoda", "mazda", "suzuki",
  "mitsubishi", "subaru", "lexus", "infiniti", "jaguar", "land rover",
  "mini", "smart", "porsche", "ferrari", "lamborghini", "maserati",
  "bentley", "rolls royce", "aston martin", "lotus", "mclaren"
]

// Lista de palabras prohibidas que indican preguntas externas/personales
const BLOCKED_KEYWORDS = [
  "personal", "privado", "particular", "mi", "tu", "su", "familia",
  "casa", "direcci√≥n", "tel√©fono", "email", "contrase√±a", "password",
  "cuenta bancaria", "tarjeta", "salario", "sueldo",
  "pol√≠tica", "religi√≥n", "deportes", "entretenimiento", "noticias",
  "clima", "tiempo", "google", "youtube", "facebook", "twitter",
  "instagram", "tiktok", "netflix", "amazon", "ebay", "mercado libre"
]

function isQuestionAboutInternalData(question: string): boolean {
  // SIN L√çMITES - Permitir cualquier pregunta
  return true
}

async function getVehicleStats() {
  try {
    const supabase = await createClient()
    
    // Estad√≠sticas b√°sicas de veh√≠culos
    const { data: salesVehicles, error: salesError } = await supabase
      .from('sales_vehicles')
      .select('*')
    
    if (salesError) {
      console.error('Error consultando sales_vehicles:', salesError)
    }
    
    const { data: nuevasEntradas, error: nuevasError } = await supabase
      .from('nuevas_entradas')
      .select('*')
    
    if (nuevasError) {
      console.error('Error consultando nuevas_entradas:', nuevasError)
    }
    
    const { data: externalVehicles, error: externalError } = await supabase
      .from('external_material_vehicles')
      .select('*')
    
    if (externalError) {
      console.error('Error consultando external_material_vehicles:', externalError)
    }
    
    return {
      totalSales: salesVehicles?.length || 0,
      totalNuevasEntradas: nuevasEntradas?.length || 0,
      totalExternal: externalVehicles?.length || 0,
      totalVehicles: (salesVehicles?.length || 0) + (nuevasEntradas?.length || 0) + (externalVehicles?.length || 0)
    }
  } catch (error) {
    console.error('Error en getVehicleStats:', error)
    return {
      totalSales: 0,
      totalNuevasEntradas: 0,
      totalExternal: 0,
      totalVehicles: 0
    }
  }
}

async function getColorStats() {
  try {
    const supabase = await createClient()
    
    const { data: salesVehicles, error } = await supabase
      .from('sales_vehicles')
      .select('color')
    
    if (error) {
      console.error('Error consultando colores:', error)
      return []
    }
    
    const colorCounts: Record<string, number> = {}
    salesVehicles?.forEach(vehicle => {
      if (vehicle.color) {
        colorCounts[vehicle.color] = (colorCounts[vehicle.color] || 0) + 1
      }
    })
    
    const sortedColors = Object.entries(colorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
    
    return sortedColors
  } catch (error) {
    console.error('Error en getColorStats:', error)
    return []
  }
}

async function getBrandStats() {
  try {
    const supabase = await createClient()
    
    const { data: salesVehicles, error } = await supabase
      .from('sales_vehicles')
      .select('brand')
    
    if (error) {
      console.error('Error consultando marcas:', error)
      return []
    }
    
    const brandCounts: Record<string, number> = {}
    salesVehicles?.forEach(vehicle => {
      if (vehicle.brand) {
        brandCounts[vehicle.brand] = (brandCounts[vehicle.brand] || 0) + 1
      }
    })
    
    const sortedBrands = Object.entries(brandCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
    
    return sortedBrands
  } catch (error) {
    console.error('Error en getBrandStats:', error)
    return []
  }
}

async function generateResponse(question: string): Promise<string> {
  try {
    const lowerQuestion = question.toLowerCase()
    
    // Respuestas espec√≠ficas basadas en palabras clave
    if (lowerQuestion.includes("color") || lowerQuestion.includes("colores")) {
      const colorStats = await getColorStats()
      if (colorStats.length > 0) {
        const topColor = colorStats[0]
        return `üé® Los colores m√°s vendidos son:\n${colorStats.map(([color, count]) => `  ‚Ä¢ ${color}: ${count} veh√≠culos`).join('\n')}\n\nEl color m√°s popular es ${topColor[0]} con ${topColor[1]} ventas.`
      }
      return "üé® No hay datos suficientes sobre colores en este momento."
    }
    
    if (lowerQuestion.includes("marca") || lowerQuestion.includes("brand") || lowerQuestion.includes("coche") || lowerQuestion.includes("carro")) {
      const brandStats = await getBrandStats()
      if (brandStats.length > 0) {
        const topBrand = brandStats[0]
        return `üè≠ Los coches m√°s vendidos por marca son:\n${brandStats.map(([brand, count]) => `  ‚Ä¢ ${brand}: ${count} veh√≠culos`).join('\n')}\n\nLa marca m√°s popular es ${topBrand[0]} con ${topBrand[1]} ventas.`
      }
      return "üè≠ No hay datos suficientes sobre marcas en este momento."
    }
    
    if (lowerQuestion.includes("total") || lowerQuestion.includes("cu√°ntos") || lowerQuestion.includes("cantidad") || lowerQuestion.includes("cuanto")) {
      const stats = await getVehicleStats()
      return `üìä Estad√≠sticas de veh√≠culos:\n  ‚Ä¢ Ventas: ${stats.totalSales}\n  ‚Ä¢ Nuevas entradas: ${stats.totalNuevasEntradas}\n  ‚Ä¢ Veh√≠culos externos: ${stats.totalExternal}\n  ‚Ä¢ Total: ${stats.totalVehicles} veh√≠culos`
    }
    
    if (lowerQuestion.includes("ventas") || lowerQuestion.includes("vender") || lowerQuestion.includes("comercial")) {
      const stats = await getVehicleStats()
      
      // Respuestas m√°s espec√≠ficas seg√∫n la pregunta
      if (lowerQuestion.includes("descuento") || lowerQuestion.includes("descuentos")) {
        return `üéØ Informaci√≥n sobre descuentos:\n  ‚Ä¢ Los descuentos var√≠an seg√∫n el modelo y stock\n  ‚Ä¢ Comerciales pueden ofrecer hasta 15% de descuento\n  ‚Ä¢ Descuentos especiales en fin de mes\n  ‚Ä¢ Ofertas por volumen de compra\n\nüí° Para consultar descuentos espec√≠ficos, contacta con el departamento comercial.`
      }
      
      if (lowerQuestion.includes("mejor") || lowerQuestion.includes("m√°s")) {
        return `üèÜ Informaci√≥n de comerciales:\n  ‚Ä¢ Los mejores comerciales se eval√∫an por ventas mensuales\n  ‚Ä¢ Comisiones basadas en volumen y margen\n  ‚Ä¢ Bonificaciones por objetivos cumplidos\n  ‚Ä¢ Ranking actualizado semanalmente\n\nüí° Para ver el ranking actual, consulta el dashboard de ventas.`
      }
      
      return `üí∞ Total de ventas registradas: ${stats.totalSales} veh√≠culos\n\nüí° Para informaci√≥n detallada de comerciales, consulta el sistema de ventas.`
    }
    
    if (lowerQuestion.includes("facturado") || lowerQuestion.includes("facturaci√≥n") || lowerQuestion.includes("dinero") || lowerQuestion.includes("ingresos")) {
      const stats = await getVehicleStats()
      // Simulaci√≥n de facturaci√≥n (en una implementaci√≥n real, esto vendr√≠a de la base de datos)
      const averagePrice = 25000 // Precio promedio simulado
      const totalRevenue = stats.totalSales * averagePrice
      
      if (stats.totalSales === 0) {
        return `üí∞ Estado de facturaci√≥n:\n  ‚Ä¢ Ventas actuales: ${stats.totalSales} veh√≠culos\n  ‚Ä¢ Facturaci√≥n: ‚Ç¨0\n  ‚Ä¢ Margen promedio: 0%\n\nüí° No hay ventas registradas en este momento.`
      }
      
      return `üí∞ Facturaci√≥n estimada:\n  ‚Ä¢ Total de ventas: ${stats.totalSales} veh√≠culos\n  ‚Ä¢ Precio promedio: ‚Ç¨${averagePrice.toLocaleString()}\n  ‚Ä¢ Facturaci√≥n total: ‚Ç¨${totalRevenue.toLocaleString()}\n  ‚Ä¢ Margen promedio: 12%\n\nüí° Nota: Esta es una estimaci√≥n basada en datos simulados.`
    }
    
    if (lowerQuestion.includes("serie") || lowerQuestion.includes("bmw")) {
      return `üèéÔ∏è Informaci√≥n sobre BMW Serie 1:\n  ‚Ä¢ Modelo compacto premium\n  ‚Ä¢ Disponible en gasolina y diesel\n  ‚Ä¢ Variantes: 116i, 118i, 120i, 116d, 118d, 120d\n  ‚Ä¢ Precio desde ‚Ç¨25,000\n\nüí° Para datos espec√≠ficos de ventas, consulta el sistema de ventas.`
    }
    
    if (lowerQuestion.includes("gasolina") || lowerQuestion.includes("diesel")) {
      return `‚õΩ Informaci√≥n sobre combustibles:\n  ‚Ä¢ Gasolina: Mayor potencia, menor consumo urbano\n  ‚Ä¢ Diesel: Mayor eficiencia en carretera\n  ‚Ä¢ H√≠brido: Combinaci√≥n de ambos\n  ‚Ä¢ El√©ctrico: Cero emisiones\n\nüí° La elecci√≥n depende del uso y preferencias del cliente.`
    }
    
    // Respuesta SIN L√çMITES - Para cualquier pregunta
    const stats = await getVehicleStats()
    
    if (stats.totalVehicles === 0) {
      return `ü§ñ ¬°Hola! Soy tu asistente SIN L√çMITES.\n\nüìä Estado actual:\n  ‚Ä¢ No hay veh√≠culos registrados en el sistema\n  ‚Ä¢ Base de datos vac√≠a o en configuraci√≥n\n\nüí° Puedo responder a CUALQUIER pregunta:\n  ‚Ä¢ Datos del negocio\n  ‚Ä¢ Informaci√≥n general\n  ‚Ä¢ Consultas t√©cnicas\n  ‚Ä¢ Lo que se te ocurra\n\n¬°Pregunta lo que quieras! üöÄ`
    }
    
    return `ü§ñ ¬°Hola! Soy tu asistente SIN L√çMITES.\n\nüìä Datos actuales:\n  ‚Ä¢ Total de veh√≠culos: ${stats.totalVehicles}\n  ‚Ä¢ Ventas registradas: ${stats.totalSales}\n  ‚Ä¢ Nuevas entradas: ${stats.totalNuevasEntradas}\n\nüí° Puedo responder a CUALQUIER pregunta:\n  ‚Ä¢ Datos del negocio\n  ‚Ä¢ Informaci√≥n general\n  ‚Ä¢ Consultas t√©cnicas\n  ‚Ä¢ Lo que se te ocurra\n\n¬°Pregunta lo que quieras! üöÄ`
  } catch (error) {
    console.error('Error en generateResponse:', error)
    return "ü§ñ Lo siento, hubo un error procesando tu pregunta. Int√©ntalo de nuevo."
  }
}

export async function POST(request: NextRequest) {
  try {
    const { question } = await request.json()
    
    if (!question || typeof question !== 'string') {
      return NextResponse.json({ 
        error: "Pregunta requerida",
        response: "‚ùå Error: Debes proporcionar una pregunta v√°lida."
      })
    }
    
    // Validar que la pregunta sea sobre datos internos
    if (!isQuestionAboutInternalData(question)) {
      return NextResponse.json({
        error: "Pregunta no permitida",
        response: "üö´ Lo siento, solo puedo responder preguntas sobre los datos internos de la aplicaci√≥n. No puedo acceder a informaci√≥n externa o personal."
      })
    }
    
    // Generar respuesta
    const response = await generateResponse(question)
    
    return NextResponse.json({ 
      success: true,
      response: response
    })
    
  } catch (error) {
    console.error('Error en terminal retro:', error)
    return NextResponse.json({ 
      error: "Error interno",
      response: "üí• Error interno del sistema. Int√©ntalo de nuevo."
    }, { status: 500 })
  }
} 
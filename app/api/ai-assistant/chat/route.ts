import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import OpenAI from 'openai'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    const { message, userInfo } = await request.json()
    
    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      )
    }

    // Verificar l√≠mite de uso diario si hay informaci√≥n del usuario
    if (userInfo?.id) {
      const usageCheck = await checkDailyUsage(userInfo.id, userInfo.role)
      if (usageCheck.limited) {
        return NextResponse.json(
          { 
            error: 'L√≠mite diario alcanzado',
            message: usageCheck.message,
            usage: usageCheck.usage
          },
          { status: 429 }
        )
      }
    }
    
    // Obtener contexto del sistema
    const context = await getSystemContext()
    
    // Agregar informaci√≥n del usuario actual si est√° disponible
    if (userInfo) {
      context.currentUser = userInfo
    }
    
    // Procesar la pregunta con IA
    const response = await processAIQuery(message, context)
    
    // Incrementar contador de uso si hay informaci√≥n del usuario
    if (userInfo?.id) {
      await incrementDailyUsage(userInfo.id)
    }
    
    return NextResponse.json({ response })
  } catch (error) {
    console.error('Error en AI Assistant:', error)
    return NextResponse.json(
      { error: 'Error procesando la consulta' },
      { status: 500 }
    )
  }
}

async function getSystemContext() {
  try {
    // Obtener conteos b√°sicos
    const [stockCount, salesCount] = await Promise.all([
      supabase.from('nuevas_entradas').select('id', { count: 'exact', head: true }),
      supabase.from('sales_vehicles').select('id', { count: 'exact', head: true })
    ])

    // Obtener datos espec√≠ficos y detallados
    const [recentSales, topAdvisors, vehicleBrands, recentVehicles, users, pendingDeliveries] = await Promise.all([
      // Ventas recientes con detalles completos
      supabase
        .from('sales_vehicles')
        .select('license_plate, model, advisor, price, payment_method, created_at, client_name, client_phone, brand')
        .order('created_at', { ascending: false })
        .limit(15),
      
      // Top asesores comerciales con estad√≠sticas
      supabase
        .from('sales_vehicles')
        .select('advisor, advisor_name, price, created_at')
        .not('advisor', 'is', null)
        .gte('created_at', new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()),
      
      // Marcas de veh√≠culos en stock con modelos
      supabase
        .from('nuevas_entradas')
        .select('license_plate, model, purchase_price, vehicle_type')
        .limit(50),
      
      // Veh√≠culos recientes en stock
      supabase
        .from('nuevas_entradas')
        .select('license_plate, model, purchase_price, vehicle_type, created_at')
        .order('created_at', { ascending: false })
        .limit(10),

      // Usuarios/empleados del sistema
      supabase
        .from('profiles')
        .select('full_name, phone, position, alias')
        .limit(20),

      // Entregas pendientes
      supabase
        .from('entregas')
        .select('matricula, modelo, asesor, fecha_entrega, observaciones')
        .limit(10)
    ])

    // Procesar datos de asesores con estad√≠sticas mensuales
    const advisorStats = topAdvisors.data?.reduce((acc: any, sale: any) => {
      if (sale.advisor) {
        if (!acc[sale.advisor]) {
          acc[sale.advisor] = { sales: 0, revenue: 0, recentSales: [] }
        }
        acc[sale.advisor].sales += 1
        acc[sale.advisor].revenue += sale.price || 0
        acc[sale.advisor].recentSales.push({
          date: sale.created_at,
          price: sale.price
        })
      }
      return acc
    }, {}) || {}

    const topAdvisorsList = Object.entries(advisorStats)
      .sort(([,a], [,b]) => (b as any).sales - (a as any).sales)
      .slice(0, 10)
      .map(([advisor, data]: [string, any]) => ({ 
        advisor, 
        sales: data.sales, 
        revenue: data.revenue,
        recentSales: data.recentSales.slice(0, 5)
      }))

    // Procesar modelos de veh√≠culos
    const modelStats = vehicleBrands.data?.reduce((acc: any, vehicle: any) => {
      if (vehicle.model) {
        if (!acc[vehicle.model]) {
          acc[vehicle.model] = { count: 0, vehicles: [] }
        }
        acc[vehicle.model].count += 1
        acc[vehicle.model].vehicles.push({
          license_plate: vehicle.license_plate,
          model: vehicle.model,
          price: vehicle.purchase_price,
          type: vehicle.vehicle_type
        })
      }
      return acc
    }, {}) || {}

    const topBrands = Object.entries(modelStats)
      .sort(([,a], [,b]) => (b as any).count - (a as any).count)
      .slice(0, 8)
      .map(([model, data]: [string, any]) => ({ 
        brand: model, 
        count: data.count,
        models: [model],
        vehicles: data.vehicles.slice(0, 5)
      }))

    const contextData = {
      // Conteos b√°sicos
      stockCount: stockCount.count || 0,
      salesCount: salesCount.count || 0,
      deliveriesCount: pendingDeliveries.data?.length || 0,
      cvoCount: 0, // No tenemos tabla de CVO
      
      // Datos espec√≠ficos y detallados
      recentSales: recentSales.data || [],
      topAdvisors: topAdvisorsList,
      topBrands: topBrands,
      pendingDeliveries: pendingDeliveries.data || [],
      recentVehicles: recentVehicles.data || [],
      recentCVOs: [], // No tenemos tabla de CVO
      users: users.data || [],
      
      timestamp: new Date().toISOString()
    }

    // Log para debug
    console.log('üîç CONTEXTO OBTENIDO:', {
      stockCount: contextData.stockCount,
      salesCount: contextData.salesCount,
      recentSalesLength: contextData.recentSales.length,
      topAdvisorsLength: contextData.topAdvisors.length,
      topBrandsLength: contextData.topBrands.length,
      usersLength: contextData.users.length
    })

    return contextData
  } catch (error) {
    console.error('Error obteniendo contexto:', error)
    return {
      stockCount: 113,
      salesCount: 18,
      deliveriesCount: 0,
      cvoCount: 0,
      recentSales: [],
      topAdvisors: [],
      topBrands: [],
      pendingDeliveries: [],
      recentVehicles: [],
      recentCVOs: [],
      users: [],
      timestamp: new Date().toISOString()
    }
  }
}

async function processAIQuery(message: string, context: any) {
  try {
    // Crear el prompt conversacional e inteligente
    const systemPrompt = `Eres Edelweiss üå∏, un asistente IA conversacional especializado en el sistema CVO. Eres como un compa√±ero de trabajo experto que conoce todo el sistema y puede ayudar con cualquier situaci√≥n del d√≠a a d√≠a.

## TU PERSONALIDAD:
- Hablas de forma natural y amigable, como una persona real
- Eres proactivo y ofreces soluciones pr√°cticas
- Te adaptas al contexto y tipo de pregunta
- Eres experto en todos los procesos del sistema CVO

## DATOS ACTUALES DEL SISTEMA:

**üìä RESUMEN GENERAL:**
- Stock total: ${context.stockCount} veh√≠culos
- Ventas registradas: ${context.salesCount} ventas
- Entregas totales: ${context.deliveriesCount} entregas
- CVO procesados: ${context.cvoCount} certificados

**üèÜ TOP ASESORES (√∫ltimos 30 d√≠as):**
${context.topAdvisors.slice(0, 5).map((advisor: any) => `‚Ä¢ ${advisor.advisor}: ${advisor.sales} ventas, ‚Ç¨${advisor.revenue?.toLocaleString() || 0} facturado`).join('\n')}

**üöó MARCAS EN STOCK:**
${context.topBrands.slice(0, 5).map((brand: any) => `‚Ä¢ ${brand.brand}: ${brand.count} veh√≠culos (modelos: ${brand.models?.slice(0, 3).join(', ') || 'N/A'})`).join('\n')}

**üìã ENTREGAS PENDIENTES:**
${context.pendingDeliveries.slice(0, 5).map((delivery: any) => `‚Ä¢ ${delivery.matricula} - ${delivery.modelo} - Asesor: ${delivery.asesor || 'Sin asesor'} - Fecha: ${delivery.fecha_entrega ? new Date(delivery.fecha_entrega).toLocaleDateString() : 'Sin fecha'} - Observaciones: ${delivery.observaciones || 'Sin observaciones'}`).join('\n')}

**üë• USUARIOS DEL SISTEMA:**
${context.users.slice(0, 10).map((user: any) => `‚Ä¢ ${user.full_name}: ${user.position || 'Usuario'} (${user.phone || 'Sin tel√©fono'})`).join('\n')}

**üë§ USUARIO ACTUAL:**
${context.currentUser ? `‚Ä¢ Nombre: ${context.currentUser.name || 'No disponible'}
‚Ä¢ Email: ${context.currentUser.email || 'No disponible'}
‚Ä¢ Rol: ${context.currentUser.role || 'No disponible'}
‚Ä¢ Tel√©fono: ${context.currentUser.phone || 'No disponible'}` : 'No hay informaci√≥n del usuario actual disponible'}

**üöó VEH√çCULOS RECIENTES EN STOCK:**
${context.recentVehicles.slice(0, 10).map((vehicle: any) => `‚Ä¢ ${vehicle.license_plate}: ${vehicle.model} (${vehicle.vehicle_type || 'Sin tipo'}) - ‚Ç¨${vehicle.purchase_price?.toLocaleString() || 'N/A'} - Fecha: ${vehicle.created_at ? new Date(vehicle.created_at).toLocaleDateString() : 'Sin fecha'}`).join('\n')}

**üí∞ VENTAS RECIENTES DETALLADAS:**
${context.recentSales.slice(0, 10).map((sale: any) => `‚Ä¢ ${sale.license_plate}: ${sale.brand || 'Sin marca'} ${sale.model} - Cliente: ${sale.client_name || 'Sin nombre'} - Tel√©fono: ${sale.client_phone || 'Sin tel√©fono'} - Asesor: ${sale.advisor || 'Sin asesor'} - Precio: ‚Ç¨${sale.price?.toLocaleString() || 'N/A'} - Fecha: ${sale.created_at ? new Date(sale.created_at).toLocaleDateString() : 'Sin fecha'}`).join('\n')}

**üìã CVO RECIENTES:**
${context.recentCVOs.slice(0, 5).map((cvo: any) => `‚Ä¢ ${cvo.license_plate}: ${cvo.status || 'Sin estado'} - ${cvo.advisor || 'Sin asesor'} - ${cvo.created_at ? new Date(cvo.created_at).toLocaleDateString() : 'Sin fecha'}`).join('\n')}

## CAPACIDADES ESPECIALES:

**üîç B√öSQUEDAS ESPEC√çFICAS:**
Puedo buscar informaci√≥n espec√≠fica sobre:
- Veh√≠culos por matr√≠cula, marca, modelo
- Clientes por nombre, tel√©fono, DNI
- Asesores comerciales y sus ventas
- Estado de entregas y CVO
- Usuarios del sistema y sus datos

**üìù PROCESOS DEL SISTEMA:**
Conozco todos los procesos:
- C√≥mo registrar una nueva venta
- C√≥mo validar un pedido
- C√≥mo gestionar entregas
- C√≥mo manejar CVO
- C√≥mo resolver incidencias
- C√≥mo justificar retrasos
- C√≥mo recuperar ventas ca√≠das

**üí° RESOLUCI√ìN DE PROBLEMAS:**
Puedo ayudar con:
- Situaciones con clientes problem√°ticos
- Retrasos en entregas
- Problemas con CVO
- Gesti√≥n de incidencias
- Justificaciones administrativas
- Estrategias de venta

## INSTRUCCIONES DE CONVERSACI√ìN:

1. **S√© conversacional**: Responde como si fueras un compa√±ero de trabajo
2. **S√© proactivo**: Ofrece informaci√≥n adicional relevante
3. **Usa datos reales**: Siempre que sea posible, usa los datos espec√≠ficos del sistema
4. **Da pasos concretos**: Para procesos, da instrucciones paso a paso
5. **Adapta tu respuesta**: Seg√∫n el tipo de pregunta (t√©cnica, pr√°ctica, problema)
6. **S√© √∫til**: Ofrece soluciones pr√°cticas y realistas

## EJEMPLOS DE RESPUESTAS:

**Usuario**: "Dime el tel√©fono de Juan Garc√≠a"
**Tu respuesta**: "Buscando a Juan Garc√≠a... [busca en los datos] Encontr√© a Juan Garc√≠a en el sistema. ¬øTe refieres al cliente con matr√≠cula ABC123 o al de XYZ789? Te muestro ambos: [datos espec√≠ficos]"

**Usuario**: "¬øC√≥mo justifico un retraso en entrega?"
**Tu respuesta**: "Para justificar un retraso, tienes varias opciones seg√∫n la causa:
1. **Problemas t√©cnicos**: Si hay retrasos en taller o documentaci√≥n
2. **Administrativos**: CVO en tr√°mite, financiaci√≥n pendiente
3. **Cliente**: Si el cliente no est√° disponible o falta documentaci√≥n
¬øCu√°l es tu situaci√≥n espec√≠fica? Puedo ayudarte a redactar la justificaci√≥n adecuada."

**Usuario**: "Tengo un problema con un cliente"
**Tu respuesta**: "Cu√©ntame qu√© est√° pasando espec√≠ficamente. ¬øEs sobre entrega, CVO, pago, o algo m√°s? Mientras tanto, puedo revisar el historial del cliente si me das la matr√≠cula o nombre para darte el contexto completo."

**IMPORTANTE**: SIEMPRE usa los datos reales proporcionados arriba. Si el usuario pregunta sobre algo espec√≠fico (como "Rodrigo Moreno" o "BMW Serie 5"), busca en los datos reales del sistema. Si no encuentras la informaci√≥n espec√≠fica, di exactamente qu√© datos S√ç tienes disponibles.

Responde siempre de forma natural, √∫til y con informaci√≥n espec√≠fica cuando sea posible.`

    const completion = await openai.chat.completions.create({
          messages: [
            {
              role: "system",
              content: systemPrompt
            },
            {
              role: "user", 
              content: message
            }
          ],
      model: "gpt-4o", // Modelo m√°s inteligente y conversacional
      temperature: 0.8,
      max_tokens: 1500,
          stream: false
        })

    return completion.choices[0]?.message?.content || "Lo siento, no pude procesar tu consulta en este momento."
    
  } catch (error) {
    console.error('Error con OpenAI:', error)
    
    // Fallback a respuestas b√°sicas si OpenAI falla
    const lowerMessage = message.toLowerCase()
    
    if (matches(lowerMessage, ['hola', 'buenos d√≠as', 'buenas tardes', 'buenas noches', 'c√≥mo est√°s', 'como estas'])) {
      return getGreetingInfo()
    }
    
    if (matches(lowerMessage, ['ayuda', 'help'])) {
      return getHelpInfo()
    }
    
    return `¬°Hola! Soy Edelweiss üå∏, tu asistente CVO especializado.

üìä **ESTADO ACTUAL DEL SISTEMA:**
‚Ä¢ **Stock**: ${context.stockCount} veh√≠culos disponibles
‚Ä¢ **Ventas**: ${context.salesCount} ventas registradas
‚Ä¢ **Entregas**: ${context.deliveriesCount} entregas totales
‚Ä¢ **CVO**: ${context.cvoCount} certificados procesados

üèÜ **TOP ASESORES:**
${context.topAdvisors.slice(0, 3).map((advisor: any) => `‚Ä¢ ${advisor.advisor}: ${advisor.sales} ventas`).join('\n')}

üöó **MARCAS EN STOCK:**
${context.topBrands.slice(0, 3).map((brand: any) => `‚Ä¢ ${brand.brand}: ${brand.count} veh√≠culos`).join('\n')}

üìã **ENTREGAS PENDIENTES:**
${context.pendingDeliveries.slice(0, 3).map((delivery: any) => `‚Ä¢ ${delivery.license_plate} - ${delivery.advisor}`).join('\n')}

üîß **¬øEN QU√â PUEDO AYUDARTE?**
‚Ä¢ **Ventas**: Registrar nuevas ventas, consultar asesores
‚Ä¢ **Stock**: Buscar veh√≠culos, consultar inventario
‚Ä¢ **Entregas**: Programar citas, seguimiento
‚Ä¢ **CVO**: Estado de certificados, tr√°mites
‚Ä¢ **Procesos**: Gu√≠as paso a paso
‚Ä¢ **Reportes**: Estad√≠sticas y an√°lisis

¬øQu√© necesitas saber espec√≠ficamente?`
  }
}

function matches(message: string, keywords: string[]): boolean {
  return keywords.some(keyword => message.includes(keyword))
}

function getGreetingInfo() {
  return `¬°Hola! Soy Edelweiss üå∏, tu asistente CVO.

üìã **FUNCIONALIDADES PRINCIPALES:**
‚Ä¢ **Ventas**: Registro y seguimiento de ventas
‚Ä¢ **Stock**: Gesti√≥n de inventario de veh√≠culos  
‚Ä¢ **Entregas**: Programaci√≥n y seguimiento
‚Ä¢ **CVO**: Certificados de Veh√≠culo Ocasional
‚Ä¢ **Reportes**: Estad√≠sticas y an√°lisis

üîß **PROCESOS M√ÅS SOLICITADOS:**
‚Ä¢ Registrar nueva venta
‚Ä¢ Consultar stock disponible
‚Ä¢ Programar entrega
‚Ä¢ Verificar estado CVO
‚Ä¢ Consultar asesores comerciales

¬øEn qu√© puedo ayudarte hoy?`
}

function getHelpInfo() {
  return `üå∏ **EDELWEISS - GU√çA DE AYUDA**

üìä **CONSULTAS DISPONIBLES:**
‚Ä¢ **Ventas**: "¬øCu√°ntas ventas hay?", "¬øQui√©n es el mejor asesor?"
‚Ä¢ **Stock**: "¬øQu√© veh√≠culos hay disponibles?", "¬øCu√°ntos BMW hay?"
‚Ä¢ **Entregas**: "¬øHay entregas pendientes?", "¬øCu√°ndo se entrega [matr√≠cula]?"
‚Ä¢ **CVO**: "¬øCu√°ntos CVO est√°n pendientes?", "Estado del CVO de [matr√≠cula]"

üìù **PROCESOS PASO A PASO:**
‚Ä¢ **Nueva Venta**: Ve a "Ventas" ‚Üí "Nueva Venta"
‚Ä¢ **Buscar Veh√≠culo**: Ve a "Veh√≠culos" ‚Üí Usa filtros
‚Ä¢ **Programar Entrega**: Ve a "Entregas" ‚Üí "Nueva Entrega"
‚Ä¢ **Verificar CVO**: Ve a "CVO" ‚Üí Busca por matr√≠cula

üèÜ **INFORMACI√ìN ESPEC√çFICA:**
‚Ä¢ Top asesores comerciales
‚Ä¢ Marcas m√°s vendidas
‚Ä¢ Entregas pendientes
‚Ä¢ Estad√≠sticas de ventas

¬øQu√© necesitas saber espec√≠ficamente?`
}

function getStockInfo(context: any) {
  return `üìä **STOCK ACTUAL:**

‚Ä¢ **Total**: ${context.stockCount} veh√≠culos disponibles

üöó **MARCAS PRINCIPALES:**
${context.topBrands.map((brand: any) => `‚Ä¢ ${brand.brand}: ${brand.count} veh√≠culos`).join('\n')}

üìã **ACCESO AL STOCK:**
‚Ä¢ Ve a "Veh√≠culos" en el men√∫ principal
‚Ä¢ Usa los filtros para buscar por marca, modelo, precio
‚Ä¢ Consulta detalles espec√≠ficos de cada veh√≠culo

¬øNecesitas informaci√≥n sobre alguna marca espec√≠fica?`
}

function getSalesInfo(context: any) {
  return `üí∞ **VENTAS ACTUALES:**

‚Ä¢ **Total registradas**: ${context.salesCount} ventas

üèÜ **TOP ASESORES COMERCIALES:**
${context.topAdvisors.map((advisor: any) => `‚Ä¢ ${advisor.advisor}: ${advisor.sales} ventas`).join('\n')}

üìã **VENTAS RECIENTES:**
${context.recentSales.slice(0, 5).map((sale: any) => `‚Ä¢ ${sale.brand} ${sale.model} - ${sale.advisor} - ${sale.license_plate}`).join('\n')}

üìä **ACCESO A VENTAS:**
‚Ä¢ Ve a "Ventas" en el men√∫ principal
‚Ä¢ Consulta ventas por asesor o per√≠odo
‚Ä¢ Registra nuevas ventas

¬øNecesitas informaci√≥n sobre alg√∫n asesor espec√≠fico o per√≠odo de tiempo?`
}

function getDeliveryInfo(context: any) {
  return `üöö **ENTREGAS ACTUALES:**

‚Ä¢ **Total registradas**: ${context.deliveriesCount} entregas

üìã **ENTREGAS PENDIENTES:**
${context.pendingDeliveries.map((delivery: any) => `‚Ä¢ ${delivery.license_plate} - ${delivery.advisor} - ${delivery.delivery_date}`).join('\n')}

üìä **ACCESO A ENTREGAS:**
‚Ä¢ Ve a "Entregas" en el men√∫ principal
‚Ä¢ Consulta entregas por estado o asesor
‚Ä¢ Programa nuevas entregas

üîß **ESTADOS DE ENTREGA:**
‚Ä¢ **Pendiente**: Esperando programaci√≥n
‚Ä¢ **En Proceso**: Preparando documentaci√≥n
‚Ä¢ **Completada**: Entregada al cliente

¬øNecesitas informaci√≥n sobre alguna entrega espec√≠fica o estado?`
}

function getCVOInfo(context: any) {
  return `üìã **CVO (CERTIFICADO DE VEH√çCULO OCASIONAL):**

‚Ä¢ **Total solicitudes**: ${context.cvoCount} certificados

üîß **PROCESO CVO:**
‚Ä¢ Se genera autom√°ticamente tras cada venta
‚Ä¢ Estado: Pendiente ‚Üí En tr√°mite ‚Üí Completado
‚Ä¢ Notificaciones autom√°ticas al cliente

üìä **ACCESO A CVO:**
‚Ä¢ Ve a "CVO" en el men√∫ principal
‚Ä¢ Busca por matr√≠cula o cliente
‚Ä¢ Consulta estado de tr√°mites

¬øNecesitas verificar el estado de alg√∫n CVO espec√≠fico?`
}

function getWorkshopInfo(context: any) {
  return `üîß **TALLER - CONTROL DE CALIDAD:**

‚Ä¢ **Sistema automatizado** de asignaci√≥n de fot√≥grafos
‚Ä¢ **Estados**: Pendiente, En Proceso, Apto, No Apto
‚Ä¢ **Categor√≠as**: Pintura y Mec√°nica

üìä **ACCESO AL TALLER:**
‚Ä¢ Ve a "Taller" en el men√∫ principal
‚Ä¢ Consulta veh√≠culos pendientes de revisi√≥n
‚Ä¢ Asigna fot√≥grafos y t√©cnicos

üîß **PROCESO DE REVISI√ìN:**
‚Ä¢ Inspecci√≥n visual (pintura)
‚Ä¢ Revisi√≥n mec√°nica
‚Ä¢ Documentaci√≥n fotogr√°fica
‚Ä¢ Aprobaci√≥n final

¬øNecesitas informaci√≥n sobre veh√≠culos pendientes de revisi√≥n?`
}

function getGeneralStats(context: any) {
  return `üìà **RESUMEN GENERAL DEL SISTEMA:**

‚Ä¢ **Stock total**: ${context.stockCount} veh√≠culos
‚Ä¢ **Ventas registradas**: ${context.salesCount} ventas
‚Ä¢ **Entregas totales**: ${context.deliveriesCount} entregas
‚Ä¢ **CVO procesados**: ${context.cvoCount} certificados

üèÜ **TOP ASESORES:**
${context.topAdvisors.slice(0, 3).map((advisor: any) => `‚Ä¢ ${advisor.advisor}: ${advisor.sales} ventas`).join('\n')}

üöó **MARCAS PRINCIPALES:**
${context.topBrands.slice(0, 3).map((brand: any) => `‚Ä¢ ${brand.brand}: ${brand.count} veh√≠culos`).join('\n')}

üìã **ENTREGAS PENDIENTES:**
${context.pendingDeliveries.slice(0, 3).map((delivery: any) => `‚Ä¢ ${delivery.license_plate} - ${delivery.advisor}`).join('\n')}

¬øNecesitas informaci√≥n espec√≠fica sobre alg√∫n √°rea?`
}

// Funci√≥n para verificar el l√≠mite de uso diario
async function checkDailyUsage(userId: string, userRole?: string): Promise<{
  limited: boolean
  message: string
  usage: { current: number, limit: number }
}> {
  try {
    // Los administradores no tienen l√≠mite
    if (userRole?.toLowerCase().includes('admin')) {
      return {
        limited: false,
        message: '',
        usage: { current: 0, limit: -1 }
      }
    }

    // Verificar uso actual del d√≠a
    const { data: usageData, error } = await supabase
      .rpc('get_edelweis_usage_today', { user_uuid: userId })

    if (error) {
      console.error('Error verificando uso diario:', error)
      return {
        limited: false,
        message: '',
        usage: { current: 0, limit: 5 }
      }
    }

    const currentUsage = usageData || 0
    const dailyLimit = 5

    if (currentUsage >= dailyLimit) {
      return {
        limited: true,
        message: `Has alcanzado el l√≠mite diario de ${dailyLimit} preguntas. Vuelve ma√±ana para continuar usando Edelweis.`,
        usage: { current: currentUsage, limit: dailyLimit }
      }
    }

    return {
      limited: false,
      message: '',
      usage: { current: currentUsage, limit: dailyLimit }
    }
  } catch (error) {
    console.error('Error en checkDailyUsage:', error)
    return {
      limited: false,
      message: '',
      usage: { current: 0, limit: 5 }
    }
  }
}

// Funci√≥n para incrementar el contador de uso diario
async function incrementDailyUsage(userId: string): Promise<void> {
  try {
    const { error } = await supabase
      .rpc('increment_edelweis_usage', { user_uuid: userId })

    if (error) {
      console.error('Error incrementando uso diario:', error)
    }
  } catch (error) {
    console.error('Error en incrementDailyUsage:', error)
  }
}


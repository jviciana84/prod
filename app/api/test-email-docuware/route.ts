import { type NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"
import nodemailer from "nodemailer"
import { getEmailTemplate } from "@/lib/email-templates/email-styles"
import { generateMovementEmailHTML } from "@/lib/email-templates/movement-email-templates"

export async function POST(request: NextRequest) {
  try {
    console.log("üß™ === INICIO TEST EMAIL DOCUWARE ===")

    const supabase = await createClient()

    // Obtener configuraci√≥n de email
    console.log("üß™ Obteniendo configuraci√≥n de email...")
    const configResult = await supabase.from("email_config").select("*").single()

    if (configResult.error) {
      console.error("‚ùå Error obteniendo configuraci√≥n:", configResult.error)
      return NextResponse.json({
        success: false,
        message: "Error obteniendo configuraci√≥n de email",
        error: configResult.error,
      })
    }

    const config = configResult.data
    if (!config.enabled) {
      console.log("‚ö†Ô∏è Env√≠o de emails deshabilitado en configuraci√≥n")
      return NextResponse.json({
        success: false,
        message: "Env√≠o de emails deshabilitado",
      })
    }

    // Verificar variables SMTP
    if (!process.env.SMTP_HOST || !process.env.SMTP_USER || !process.env.SMTP_PASSWORD) {
      console.error("‚ùå Configuraci√≥n SMTP incompleta")
      return NextResponse.json({
        success: false,
        message: "Configuraci√≥n SMTP incompleta",
      })
    }

    // Configuraci√≥n del transporter
    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number.parseInt(process.env.SMTP_PORT || "465"),
      secure: true,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASSWORD,
      },
      tls: {
        rejectUnauthorized: false,
      },
      connectionTimeout: 10000,
      greetingTimeout: 10000,
      socketTimeout: 10000,
    })

    // Verificar conexi√≥n SMTP
    try {
      await transporter.verify()
      console.log("‚úÖ Conexi√≥n SMTP verificada correctamente")
    } catch (verifyError) {
      console.error("‚ùå Error verificando conexi√≥n SMTP:", verifyError)
      return NextResponse.json({
        success: false,
        message: "Error de conexi√≥n SMTP",
        error: verifyError.message,
      })
    }

    // Datos de prueba (sin usar datos reales)
    const testMovementData = {
      fecha: new Date().toLocaleDateString('es-ES'),
      usuario_entrega: "Sistema de Prueba",
      email_entrega: "test@controlvo.ovh",
      movimientos: [
        {
          usuario_recibe: "Jordi Viciana",
          email_recibe: "jordi.viciana@munichgroup.es",
          items: [
            {
              matricula: "TEST123",
              material: "2¬™ Llave",
              observaciones: "Email de prueba del sistema Docuware"
            },
            {
              matricula: "TEST456", 
              material: "Ficha T√©cnica",
              observaciones: "Verificaci√≥n del sistema de email"
            }
          ]
        }
      ]
    }

    console.log("üß™ Datos de prueba:", JSON.stringify(testMovementData, null, 2))

    // Generar HTML del email
    const emailHTML = generateMovementEmailHTML(testMovementData)
    const fullEmailHTML = getEmailTemplate(emailHTML, "Movimiento de Materiales - TEST")

    // Enviar email de prueba
    const mailOptions = {
      from: `"ControlVO" <${process.env.SMTP_USER}>`,
      to: "jordi.viciana@munichgroup.es",
      subject: "üß™ TEST - Sistema de Email Docuware",
      html: fullEmailHTML,
    }

    console.log("üß™ Enviando email de prueba...")
    const info = await transporter.sendMail(mailOptions)

    console.log("‚úÖ Email de prueba enviado correctamente")
    console.log("üß™ Message ID:", info.messageId)
    console.log("üß™ Destinatario:", mailOptions.to)

    return NextResponse.json({
      success: true,
      message: "Email de prueba enviado correctamente",
      messageId: info.messageId,
      recipient: mailOptions.to,
      testData: testMovementData
    })

  } catch (error: any) {
    console.error("‚ùå Error en test de email:", error)
    return NextResponse.json({
      success: false,
      message: "Error enviando email de prueba",
      error: error.message,
    })
  }
} 
import { createClientComponentClient } from "@/lib/supabase/client"

// Funci√≥n para obtener los roles del usuario actual (lado del cliente)
export async function getUserRolesClient(): Promise<string[]> {
  const supabase = createClientComponentClient()

  try {
    const {
      data: { user },
      error: userError,
    } = await supabase.auth.getUser()

    if (userError || !user) {
      console.log("‚ö†Ô∏è [getUserRolesClient] No hay usuario autenticado en el cliente.")
      return []
    }

    console.log("‚úÖ [getUserRolesClient] Usuario autenticado ID:", user.id)

    // Intentar obtener roles desde user_roles
    const { data: userRoles, error: userRolesError } = await supabase
      .from("user_roles")
      .select(`
        roles (
          name
        )
      `)
      .eq("user_id", user.id)

    if (!userRolesError && userRoles && userRoles.length > 0) {
      const roles = userRoles.map((ur: any) => ur.roles?.name).filter(Boolean)
      console.log("‚úÖ [getUserRolesClient] Roles obtenidos desde user_roles:", roles)
      return roles.map((role: string) => role.toLowerCase())
    }

    // Fallback: intentar obtener desde profiles
    const { data: profileData, error: profileError } = await supabase
      .from("profiles")
      .select("role")
      .eq("id", user.id)
      .single()

    if (!profileError && profileData?.role) {
      const roles = profileData.role.split(", ").map((role: string) => role.toLowerCase().trim())
      console.log("‚úÖ [getUserRolesClient] Roles obtenidos desde profiles:", roles)
      return roles
    }

    console.log("‚ö†Ô∏è [getUserRolesClient] No se encontraron roles")
    return []
  } catch (error) {
    console.error("‚ùå [getUserRolesClient] Error inesperado:", error)
    return []
  }
}

// Funci√≥n para verificar si el usuario es administrador (lado del cliente)
export async function isUserAdminClient(): Promise<boolean> {
  try {
    console.log("‚öôÔ∏è [isUserAdminClient] Verificando si el usuario es administrador...")
    const roles = await getUserRolesClient()
    console.log("‚úÖ [isUserAdminClient] Roles obtenidos para verificaci√≥n de admin:", roles)
    
    // Verificar cualquier rol de administrador (considerando may√∫sculas/min√∫sculas)
    const isAdmin = roles.some((role) => {
      const lowerRole = role.toLowerCase()
      return lowerRole === "admin" || 
             lowerRole === "administrador" || 
             lowerRole === "administraci√≥n" ||
             lowerRole.includes("admin")
    })
    
    console.log("üõ°Ô∏è [isUserAdminClient] Resultado de verificaci√≥n de admin:", isAdmin)
    return isAdmin
  } catch (error) {
    console.error("‚ùå [isUserAdminClient] Error inesperado al verificar si es admin:", error)
    return false
  }
}

// Funci√≥n para verificar si el usuario es supervisor o director (lado del cliente)
export async function isUserSupervisorOrDirectorClient(): Promise<boolean> {
  try {
    console.log("‚öôÔ∏è [isUserSupervisorOrDirectorClient] Verificando si el usuario es supervisor o director...")
    const roles = await getUserRolesClient()
    console.log("‚úÖ [isUserSupervisorOrDirectorClient] Roles obtenidos:", roles)
    
    // Verificar roles de supervisi√≥n (considerando may√∫sculas/min√∫sculas)
    const isSupervisorOrDirector = roles.some((role) => {
      const lowerRole = role.toLowerCase()
      return lowerRole === "supervisor" || 
             lowerRole === "director" ||
             lowerRole.includes("supervisor") ||
             lowerRole.includes("director")
    })
    
    console.log("üõ°Ô∏è [isUserSupervisorOrDirectorClient] Resultado:", isSupervisorOrDirector)
    return isSupervisorOrDirector
  } catch (error) {
    console.error("‚ùå [isUserSupervisorOrDirectorClient] Error inesperado:", error)
    return false
  }
}

// Funci√≥n para verificar si el usuario puede editar (lado del cliente)
export async function canUserEditClient(): Promise<boolean> {
  try {
    const isAdmin = await isUserAdminClient()
    const isSupervisorOrDirector = await isUserSupervisorOrDirectorClient()
    
    return isAdmin || isSupervisorOrDirector
  } catch (error) {
    console.error("‚ùå [canUserEditClient] Error inesperado:", error)
    return false
  }
}

// Funci√≥n para obtener el primer rol del usuario (lado del cliente)
export async function getUserRoleClient(): Promise<string | null> {
  try {
    const roles = await getUserRolesClient()
    return roles.length ? roles[0] : null
  } catch (error) {
    console.error("‚ùå [getUserRoleClient] Error inesperado:", error)
    return null
  }
}

// Funci√≥n para verificar si el usuario tiene un rol espec√≠fico (lado del cliente)
export async function hasRoleClient(roleName: string): Promise<boolean> {
  try {
    const roles = await getUserRolesClient()
    return roles.some(role => role.toLowerCase() === roleName.toLowerCase())
  } catch (error) {
    console.error("‚ùå [hasRoleClient] Error inesperado:", error)
    return false
  }
} 
name: Mark Photos Automatically

on:
  schedule:
    - cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  mark-photos:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Supabase client
      run: npm install @supabase/supabase-js
      
    - name: Execute photo marking script
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      run: |
        echo "üîç Verificando variables de entorno..."
        echo "SUPABASE_URL: ${{ secrets.SUPABASE_URL != '' && '‚úÖ Configurado' || '‚ùå No configurado' }}"
        echo "SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY != '' && '‚úÖ Configurado' || '‚ùå No configurado' }}"
        
        # Crear script temporal para ejecutar la funci√≥n
        cat > execute_photo_marking.js << 'EOF'
        const { createClient } = require('@supabase/supabase-js');
        
        const supabaseUrl = process.env.SUPABASE_URL;
        const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
        
        console.log('üîç Verificando variables de entorno...');
        console.log('SUPABASE_URL:', supabaseUrl ? '‚úÖ Configurado' : '‚ùå No configurado');
        console.log('SUPABASE_SERVICE_ROLE_KEY:', supabaseKey ? '‚úÖ Configurado' : '‚ùå No configurado');
        
        if (!supabaseUrl || !supabaseKey) {
          console.error('‚ùå Variables de entorno de Supabase no encontradas');
          console.error('Por favor, configura SUPABASE_URL y SUPABASE_SERVICE_ROLE_KEY en GitHub Secrets');
          process.exit(1);
        }
        
        const supabase = createClient(supabaseUrl, supabaseKey);
        
        async function markPhotosAsCompleted() {
          try {
            console.log('üöÄ Iniciando marcado autom√°tico de fotos...');
            
            // Verificar conexi√≥n a Supabase
            console.log('üîó Probando conexi√≥n a Supabase...');
            const { data: testData, error: testError } = await supabase.from('fotos').select('count').limit(1);
            
            if (testError) {
              console.error('‚ùå Error conectando a Supabase:', testError);
              process.exit(1);
            }
            
            console.log('‚úÖ Conexi√≥n a Supabase exitosa');
            
            // Ejecutar la funci√≥n SQL que marca las fotos
            console.log('üìä Ejecutando funci√≥n mark_photos_as_completed...');
            const { data, error } = await supabase.rpc('mark_photos_as_completed');
            
            if (error) {
              console.error('‚ùå Error ejecutando funci√≥n:', error);
              console.error('Detalles del error:', JSON.stringify(error, null, 2));
              process.exit(1);
            }
            
            console.log('‚úÖ Funci√≥n ejecutada correctamente');
            console.log('üìä Resultados:', JSON.stringify(data, null, 2));
            
            // Verificar resultados
            if (data && data.total_updated > 0) {
              console.log(`üéâ Se marcaron ${data.total_updated} veh√≠culos como fotografiados`);
            } else {
              console.log('‚ÑπÔ∏è No se encontraron veh√≠culos para marcar como fotografiados');
            }
            
          } catch (error) {
            console.error('‚ùå Error inesperado:', error);
            console.error('Stack trace:', error.stack);
            process.exit(1);
          }
        }
        
        markPhotosAsCompleted();
        EOF
        
        # Ejecutar el script
        node execute_photo_marking.js 